resources:
- repo: self

queue:
  name: Hosted macOS
  demands: npm

variables:
  python.version: '3.5, 3.6, 3.7'
steps:
- task: UsePythonVersion@0
  displayName: 'Use Python $(python.version)'
  inputs:
    versionSpec: '$(python.version)'


- script: |
   python -m pip install --upgrade pip
   pip install flake8
   pip install pytest
   pip install bandit
  displayName: 'Install dependencies'

- script: |
   cd core
   python -m pip install .
   cd ../server
   python -m pip install .
  workingDirectory: 'textX-LS'

  displayName: 'Install packages from source'
  continueOnError: true

- script: 'flake8 .'
  workingDirectory: 'textX-LS/core'

  displayName: '[textX-LS-core] Flake8'
  continueOnError: true

- script: pytest
  workingDirectory: 'textX-LS/core'

  displayName: '[textX-LS-core] Tests'
  continueOnError: true

- script: 'bandit -r textx_ls_core'
  workingDirectory: 'textX-LS/core'

  displayName: '[textX-LS-core] Bandit'
  continueOnError: true

- script: 'flake8 .'
  workingDirectory: 'textX-LS/server'

  displayName: '[textX-LS-server] Flake8'
  continueOnError: true

- script: pytest
  workingDirectory: 'textX-LS/server'

  displayName: '[textX-LS-server] Tests'
  continueOnError: true

- script: 'bandit -r textx_ls_server'
  workingDirectory: 'textX-LS/server'

  displayName: '[textX-LS-server] Bandit'
  continueOnError: true

- task: Npm@1
  displayName: '[textX-vscode] Install node modules'
  inputs:
    workingDir: client

    verbose: false

  continueOnError: true

- bash: './node_modules/.bin/tslint src\*.ts'
  workingDirectory: client

  displayName: '[textX-vscode] tslint'
  continueOnError: true

- bash: 'exit 1'
  displayName: 'Fail if one of the steps succeeded with issues '
  condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues', 'Failed')

- bash: |
   # Install dependencies to build packages
   pip install wheel
   npm i -g vsce

   # Append build id to versions
   get_setuppy_version() {
       version=$(grep -o "'\d.\d.\d'" $1)
       echo "${version//\'}"
   }

   replace_setuppy_version() {
       version=$(get_setuppy_version $1)
       build_version=$version+$2
       sed -i "" "s|$version|$build_version|g" $1
   }

   replace_packagejson_version() {
       version_line=$(grep -o '"version".*' $1)
       version=$(python -m json.tool package.json | awk -F'"' '/version/{print $4}')
       build_version=$version+$2
       build_version_line=${version_line/$version/$build_version}
       sed -i "" "s|$version_line|$build_version_line|g" $1
   }

   build_suffix=${BUILD_SOURCEVERSION:0:8}
   replace_setuppy_version ./textX-LS/core/setup.py $build_suffix
   replace_setuppy_version ./textX-LS/server/setup.py $build_suffix

   cd client
   replace_packagejson_version package.json $build_suffix

  displayName: 'Change versions (except for master branch and tags)'
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), True))

- bash: |
   # Build .vsix file
   vsce package

   # Create output env vars
   this_folder=$(dirname "$(pwd)")

   TEXTX_LS_CORE_ARTIFACT_NAME=$(ls ./wheels | grep core)
   TEXTX_LS_SERVER_ARTIFACT_NAME=$(ls ./wheels | grep server)
   TEXTX_LS_VSCODE_ARTIFACT_NAME=$(ls | grep vsix)

   # Create output variables
   echo "##vso[task.setvariable variable=TEXTX_LS_CORE_ARTIFACT_NAME]$TEXTX_LS_CORE_ARTIFACT_NAME"
   echo "##vso[task.setvariable variable=TEXTX_LS_SERVER_ARTIFACT_NAME]$TEXTX_LS_SERVER_ARTIFACT_NAME"
   echo "##vso[task.setvariable variable=TEXTX_LS_VSCODE_ARTIFACT_NAME]$TEXTX_LS_VSCODE_ARTIFACT_NAME"
  workingDirectory: client

  displayName: 'Create wheels and extension file'

- task: CopyFiles@2
  displayName: 'Copy wheels and vsix to artifact staging dir'
  inputs:
    SourceFolder: client

    Contents: |
     wheels/*.whl
     *.vsix

    TargetFolder: '$(build.artifactstagingdirectory)'


- task: PublishBuildArtifacts@1
  displayName: '[textX-LS-core] Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/wheels/$(TEXTX_LS_CORE_ARTIFACT_NAME)'

    ArtifactName: '$(TEXTX_LS_CORE_ARTIFACT_NAME)'


- task: PublishBuildArtifacts@1
  displayName: '[textX-LS-server] Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/wheels/$(TEXTX_LS_SERVER_ARTIFACT_NAME)'

    ArtifactName: '$(TEXTX_LS_SERVER_ARTIFACT_NAME)'


- task: PublishBuildArtifacts@1
  displayName: '[textX-vscode] Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/$(TEXTX_LS_VSCODE_ARTIFACT_NAME)'

    ArtifactName: '$(TEXTX_LS_VSCODE_ARTIFACT_NAME)'


